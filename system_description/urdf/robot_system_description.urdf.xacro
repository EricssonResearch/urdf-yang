<?xml version="1.0"?>
<robot name="$(arg name)"
   xmlns:xacro="http://wiki.ros.org/xacro" 
   xmlns:ros="urn:ros"
   xmlns:nw="urn:network"
   xmlns:nt="urn:network-topology">

   <!-- robot name parameter -->
   <xacro:arg name="name" default="ur"/>
   <!-- import robot arm -->
   <xacro:include filename="$(find ur_description)/urdf/ur_macro.xacro"/>
   <!-- import gripper bracket -->
   <xacro:include filename="$(find erik_description)/urdf/gripper_bracket.urdf.xacro" />
   <!-- import camera holder -->
   <xacro:include filename="$(find erik_description)/urdf/camera_holder.urdf.xacro" />
   <!-- import d455 camera -->
   <xacro:include filename="$(find realsense2_description)/urdf/_d455.urdf.xacro" />
   <!-- import rg2ft gripper -->
   <xacro:include filename="$(find onrobot_description)/urdf/rg2ft.urdf.xacro" />
   <!-- import nuc -->
   <xacro:include filename="$(find nuc_description)/urdf/nuc.urdf.xacro" />
   <!-- import poe-sw -->
   <xacro:include filename="$(find poesw_description)/urdf/poe-switch.urdf.xacro" />
   <!-- import flightrack -->
   <xacro:include filename="$(find flightrack_description)/urdf/flightrack.urdf.xacro" />
   <!-- import 5g modem -->
   <xacro:include filename="$(find nw-5g-modem_description)/urdf/nw-5g-modem.urdf.xacro" />
   <!-- import 5g radio dot -->
   <xacro:include filename="$(find radiodot_description)/urdf/radiodot.urdf.xacro" />

   <!-- possible 'ur_type' values: ur3, ur3e, ur5, ur5e, ur10, ur10e, ur16e, ur20 -->
   <!-- the default value should raise an error in case this was called without defining the type -->
   <xacro:arg name="ur_type" default="ur3e"/>

   <!-- parameters -->
   <xacro:arg name="tf_prefix" default="" />
   <xacro:arg name="joint_limit_params" default="$(find ur_description)/config/$(arg ur_type)/joint_limits.yaml"/>
   <xacro:arg name="kinematics_params" default="$(find ur_description)/config/$(arg ur_type)/default_kinematics.yaml"/>
   <xacro:arg name="physical_params" default="$(find ur_description)/config/$(arg ur_type)/physical_parameters.yaml"/>
   <xacro:arg name="visual_params" default="$(find ur_description)/config/$(arg ur_type)/visual_parameters.yaml"/>
   <xacro:arg name="transmission_hw_interface" default=""/>
   <xacro:arg name="safety_limits" default="false"/>
   <xacro:arg name="safety_pos_margin" default="0.15"/>
   <xacro:arg name="safety_k_position" default="20"/>
   <!-- ros2_control related parameters -->
   <xacro:arg name="headless_mode" default="false" />
   <xacro:arg name="robot_ip" default="0.0.0.0" />
   <xacro:arg name="script_filename" default=""/>
   <xacro:arg name="output_recipe_filename" default=""/>
   <xacro:arg name="input_recipe_filename" default=""/>
   <xacro:arg name="reverse_ip" default="0.0.0.0"/>
   <xacro:arg name="script_command_port" default="50004"/>
   <xacro:arg name="reverse_port" default="50001"/>
   <xacro:arg name="script_sender_port" default="50002"/>
   <xacro:arg name="trajectory_port" default="50003"/>
   <!--   tool communication related parameters-->
   <xacro:arg name="use_tool_communication" default="false" />
   <xacro:arg name="tool_voltage" default="0" />
   <xacro:arg name="tool_parity" default="0" />
   <xacro:arg name="tool_baud_rate" default="115200" />
   <xacro:arg name="tool_stop_bits" default="1" />
   <xacro:arg name="tool_rx_idle_chars" default="1.5" />
   <xacro:arg name="tool_tx_idle_chars" default="3.5" />
   <xacro:arg name="tool_device_name" default="/tmp/ttyUR" />
   <xacro:arg name="tool_tcp_port" default="54321" />

     <!-- Simulation parameters -->
   <xacro:arg name="use_fake_hardware" default="false" />
   <xacro:arg name="fake_sensor_commands" default="false" />
   <xacro:arg name="sim_gazebo" default="false" />
   <xacro:arg name="sim_ignition" default="false" />
   <xacro:arg name="simulation_controllers" default="" />
   <xacro:arg name="add_controlbox" default="true" />

   <!-- initial position for simulations (Fake Hardware, Gazebo, Ignition) -->
   <xacro:arg name="initial_positions_file" default="$(find ur_description)/config/initial_positions.yaml"/>

   <!-- convert to property to use substitution in function -->
   <xacro:property name="initial_positions_file" default="$(arg initial_positions_file)"/>

   <!-- create link fixed to the "world" -->
   <link name="world" />

   <!-- arm -->
   <xacro:ur_robot
     name="$(arg name)"
     tf_prefix="$(arg tf_prefix)"
     parent="world"
     joint_limits_parameters_file="$(arg joint_limit_params)"
     kinematics_parameters_file="$(arg kinematics_params)"
     physical_parameters_file="$(arg physical_params)"
     visual_parameters_file="$(arg visual_params)"
     transmission_hw_interface="$(arg transmission_hw_interface)"
     safety_limits="$(arg safety_limits)"
     safety_pos_margin="$(arg safety_pos_margin)"
     safety_k_position="$(arg safety_k_position)"
     use_fake_hardware="$(arg use_fake_hardware)"
     fake_sensor_commands="$(arg fake_sensor_commands)"
     sim_gazebo="$(arg sim_gazebo)"
     sim_ignition="$(arg sim_ignition)"
     headless_mode="$(arg headless_mode)"
     initial_positions="${xacro.load_yaml(initial_positions_file)}"
     use_tool_communication="$(arg use_tool_communication)"
     tool_voltage="$(arg tool_voltage)"
     tool_parity="$(arg tool_parity)"
     tool_baud_rate="$(arg tool_baud_rate)"
     tool_stop_bits="$(arg tool_stop_bits)"
     tool_rx_idle_chars="$(arg tool_rx_idle_chars)"
     tool_tx_idle_chars="$(arg tool_tx_idle_chars)"
     tool_device_name="$(arg tool_device_name)"
     tool_tcp_port="$(arg tool_tcp_port)"
     robot_ip="$(arg robot_ip)"
     script_filename="$(arg script_filename)"
     output_recipe_filename="$(arg output_recipe_filename)"
     input_recipe_filename="$(arg input_recipe_filename)"
     reverse_ip="$(arg reverse_ip)"
     script_command_port="$(arg script_command_port)"
     reverse_port="$(arg reverse_port)"
     script_sender_port="$(arg script_sender_port)"
     trajectory_port="$(arg trajectory_port)"
     >
     <origin xyz="0 0 0" rpy="0 0 0" />          <!-- position robot in the world -->
   </xacro:ur_robot>


   <!-- link gripper bracket with gripper wrist3 -->
   <xacro:gripper_bracket parent="wrist_3_link" />
   <!-- link rg2ft with gripper bracket -->
   <xacro:rg2ft parent="tool0"/>
   <!-- link camera holder with gripper bracket -->
   <xacro:camera_holder parent="gripper_bracket_link" />
   <!-- Link camera with camera holder -->
   <xacro:sensor_d455 parent="camera_holder_link">
     <!-- xyz: elore-hatra ; le-fel ; jobbra-balra -->
     <origin xyz="-0.022 -0.039 -0.01" rpy="0 1.57 0" />
   </xacro:sensor_d455>
   <!-- link nuc with world -->
   <xacro:nuc parent="world"/>
   <!-- link poe-switch with world -->
   <xacro:poesw parent="world"/>
   <!-- link flightrack with world -->
   <xacro:flightrack parent="world"/>
   <!-- link 5gmodem with world -->
   <xacro:nw-5g-modem parent="world"/>
   <!-- link radiodot with world -->
   <xacro:radiodot parent="world"/>

  <yang>
  <xacro:macro name="system_instance" params="L2_network_id:=Data_Link">
   <nw:network>
     <nw:network-id name="ros"/>
     <nw:network-types>
       <ros:ros-node-graph/>
     </nw:network-types>
     <nw:supporting-network>
       <nw:network-ref name="${L2_network_id}"/> <!-- ${L2_network_id}-->
     </nw:supporting-network>
   <!-- </nw:network> -->


    <!-- ros2 node info /robot_state_publisher -->
    <nw:node> <!-- robot-state-publiser ROS node -->
      <nw:node-id name="robot-state-publisher" /> <!--(node-name)-->
      <ros:ros-node-attributes>
        <ros:ros-node-type>node</ros:ros-node-type>
      </ros:ros-node-attributes>  
      <nt:termination-point>
        <nt:tp-id>pub</nt:tp-id>
      </nt:termination-point>
      <nt:termination-point>
        <nt:tp-id>sub</nt:tp-id>
      </nt:termination-point>
    </nw:node>

    <nt:link> <!-- subscribes to  (link: subscribers_node-name)-->
      <nt:link-id name="joint_states-robot-state-publisher" />
      <nt:source>
        <nt:source-node name="joint_states" />
        <nt:source-tp>sub</nt:source-tp>
      </nt:source>
      <nt:destination>
        <nt:dest-node name="robot-state-publisher" />
        <nt:dest-tp>sub</nt:dest-tp>
      </nt:destination>
    </nt:link>

    <nt:link> <!-- publishes to (node-name-publishers_name)-->
      <nt:link-id name="robot-state-publisher-tf" />
      <nt:source>
        <nt:source-node name="robot-state-publisher" />
        <nt:source-tp>pub</nt:source-tp>
      </nt:source>
      <nt:destination>
        <nt:dest-node>tf</nt:dest-node>
        <nt:dest-tp>pub</nt:dest-tp>
      </nt:destination>
    </nt:link>

    <nt:link> <!-- publishes to (node-name-publishers_name)-->
      <nt:link-id name="robot-state-publisher-tf_static" />
      <nt:source>
        <nt:source-node name="robot-state-publisher" />
        <nt:source-tp>pub</nt:source-tp>
      </nt:source>
      <nt:destination>
        <nt:dest-node name="tf_static" />
        <nt:dest-tp>pub</nt:dest-tp>
      </nt:destination>
    </nt:link>

    <nt:link> <!-- publishes to (node-name-publishers_name)-->
      <nt:link-id name="robot-state-publisher-robot_description" />
      <nt:source>
        <nt:source-node name="robot-state-publisher" />
        <nt:source-tp>pub</nt:source-tp>
      </nt:source>
      <nt:destination>
        <nt:dest-node name="robot_description" />
        <nt:dest-tp>pub</nt:dest-tp>
      </nt:destination>
    </nt:link>

    <nw:node> <!-- /tf topic -->
      <nw:node-id name="tf" /> <!-- ros topic tipusÃº yang node! -->
      <ros:ros-node-attributes>
        <ros:ros-node-type>topic</ros:ros-node-type>
        <ros:topic-type name="tf2_msgs/msg/TFMessage" hz="0" bw="0"/>
      </ros:ros-node-attributes>
      <nt:termination-point>
        <nt:tp-id>pub</nt:tp-id>
      </nt:termination-point>
      <nt:termination-point>
        <nt:tp-id>sub</nt:tp-id>
      </nt:termination-point>
    </nw:node>

    <nw:node> <!-- /tf_static topic -->
      <nw:node-id name="/tf_static" />
      <ros:ros-node-attributes>
        <ros:ros-node-type>topic</ros:ros-node-type>
        <ros:topic-type name="tf2_msgs/msg/TFMessage" hz="10" bw="11 KB/s"/>
      </ros:ros-node-attributes>
      <nt:termination-point>
        <nt:tp-id>pub</nt:tp-id>
      </nt:termination-point>
      <nt:termination-point>
        <nt:tp-id>sub</nt:tp-id>
      </nt:termination-point>
    </nw:node>

    <nw:node> <!-- /robot_description topic -->
      <nw:node-id name="/robot_description" /> 
      <ros:ros-node-attributes>
        <ros:ros-node-type>topic</ros:ros-node-type>
        <ros:topic-type name="std_msgs/msg/String" hz="0" bw="0"/>
      </ros:ros-node-attributes>
      <nt:termination-point>
        <nt:tp-id>pub</nt:tp-id>
      </nt:termination-point>
      <nt:termination-point>
        <nt:tp-id>sub</nt:tp-id>
      </nt:termination-point>
    </nw:node>

    <nw:node> <!-- joint-state-publiser ROS node -->
      <nw:node-id name="joint-state-publisher" /> <!--(node-name)-->
      <ros:ros-node-attributes>
        <ros:ros-node-type>node</ros:ros-node-type>
      </ros:ros-node-attributes>  
      <nt:termination-point>
        <nt:tp-id>pub</nt:tp-id>
      </nt:termination-point>
      <nt:termination-point>
        <nt:tp-id>sub</nt:tp-id>
      </nt:termination-point>
    </nw:node>

    <nt:link> <!-- subscribes to  (link: subscribers_node-name)-->
      <nt:link-id name="robot_description-joint-state-publisher" />
      <nt:source>
        <nt:source-node name="robot_description" /> 
        <nt:source-tp>sub</nt:source-tp>
      </nt:source>
      <nt:destination>
        <nt:dest-node name="robot-state-publisher" />
        <nt:dest-tp>sub</nt:dest-tp>
      </nt:destination>
    </nt:link>

    <nt:link> <!-- publishes to (node-name-publishers_name)-->
      <nt:link-id name="joint-state-publisher-joint_states" />
      <nt:source>
        <nt:source-node name="joint-state-publisher" />
        <nt:source-tp>pub</nt:source-tp>
      </nt:source>
      <nt:destination>
        <nt:dest-node name="joint_states" />
        <nt:dest-tp>pub</nt:dest-tp>
      </nt:destination>
    </nt:link>

    <nw:node> <!-- /joint_states topic -->
      <nw:node-id name="/joint_states" /> <!-- ros topic tipusÃº yang node! -->
      <ros:ros-node-attributes>
        <ros:ros-node-type>topic</ros:ros-node-type>
        <ros:topic-type name="sensor_msgs/msg/JointState" hz="10" bw="3.57 KB/s"/>
      </ros:ros-node-attributes>
      <nt:termination-point>
        <nt:tp-id>pub</nt:tp-id>
      </nt:termination-point>
      <nt:termination-point>
        <nt:tp-id>sub</nt:tp-id>
      </nt:termination-point>
    </nw:node>
   </nw:network>

  </xacro:macro>
  </yang>

</robot>
